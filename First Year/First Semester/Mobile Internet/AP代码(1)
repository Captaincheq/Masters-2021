/*
This file can be found in SEAL/native/example/ 
该文件可以在SEAL/native/example目录下找到
*/
using namespace std;
using namespace seal;
#define N 3
//本例的目的是计算x，y，z的乘积

int main(){
//客户端的视角： 要进行计算的数据
vector<double> x, y, z;
	x = { 1.0, 2.0, 3.0 };
	y = { 2.0, 3.0, 4.0 };
	z = { 3.0, 4.0, 5.0 };

//构建参数容器 parms
EncryptionParameters parms(scheme_type::CKKS);
/*CKKS有三个重要参数：
1.poly_module_degree(多项式模数)
2.coeff_modulus（参数模数）
3.scale（规模）
下一小节会详细解释*/

size_t poly_modulus_degree = 8192;
parms.set_poly_modulus_degree(poly_modulus_degree);
parms.set_coeff_modulus(CoeffModulus::Create(poly_modulus_degree, { 60, 40, 40, 60 }));
//选用2^40进行编码
double scale = pow(2.0, 40);

//用参数生成CKKS框架context
auto context = SEALContext::Create(parms);

//构建各模块
//首先构建keygenerator，生成公钥、私钥和重线性化密钥
KeyGenerator keygen(context);
	auto public_key = keygen.public_key();
	auto secret_key = keygen.secret_key();
	auto relin_keys = keygen.relin_keys();

//构建编码器，加密模块、运算器和解密模块
//注意加密需要公钥pk；解密需要私钥sk；编码器需要scale
	Encryptor encryptor(context, public_key);
	Evaluator evaluator(context);
	Decryptor decryptor(context, secret_key);

	CKKSEncoder encoder(context);
//对向量x、y、z进行编码
	Plaintext xp, yp, zp;
	encoder.encode(x, scale, xp);
	encoder.encode(y, scale, yp);
	encoder.encode(z, scale, zp);
//对明文xp、yp、zp进行加密
	Ciphertext xc, yc, zc;
	encryptor.encrypt(xp, xc);
	encryptor.encrypt(yp, yc);
	encryptor.encrypt(zp, zc);
/*对密文进行计算，要说明的原则是：
1.加法可以连续运算，但乘法不能连续运算
2.密文乘法后要进行relinearize操作
3.执行乘法后要进行rescaling操作
4.进行运算的密文必需执行过相同次数的rescaling（位于相同level）
*/
//基于上述原则进行运算

//至此，客户端将pk、CKKS参数发送给服务器，服务器开始运算
//服务器的视角：先设中间变量
	Ciphertext temp;
	Ciphertext result_c;
//计算x*y，密文相乘，要进行relinearize和rescaling操作
	evaluator.multiply(xc,yc,temp);
	evaluator.relinearize_inplace(temp, relin_keys);
	evaluator.rescale_to_next_inplace(temp);
//在计算x*y * z之前，z没有进行过rescaling操作，所以需要对z进行一次乘法和rescaling操作，目的是 make x*y and z at the same level
	Plaintext wt;
	encoder.encode(1.0, scale, wt);
//我们可以查看框架中不同数据的层级：
cout << "    + Modulus chain index for zc: "
<< context->get_context_data(zc.parms_id())->chain_index() << endl;
cout << "    + Modulus chain index for temp(x*y): "
<< context->get_context_data(temp.parms_id())->chain_index() << endl;
cout << "    + Modulus chain index for wt: "
<< context->get_context_data(wt.parms_id())->chain_index() << endl;

//执行乘法和rescaling操作：
	evaluator.multiply_plain_inplace(zc, wt);
	evaluator.rescale_to_next_inplace(zc);

//再次查看zc的层级，可以发现zc与temp层级变得相同
cout << "    + Modulus chain index for zc after zc*wt and rescaling: "
<< context->get_context_data(zc.parms_id())->chain_index() << endl;

//最后执行temp（x*y）* zc（z*1.0）
	evaluator.multiply_inplace(temp, zc);
	evaluator.relinearize_inplace(temp,relin_keys);
	evaluator.rescale_to_next(temp, result_c);
//计算完毕，服务器把结果发回客户端

//客户端进行解密和解码
	Plaintext result_p;
	decryptor.decrypt(result_c, result_p);
//注意要解码到一个向量上
	vector<double> result;
	encoder.decode(result_p, result);
//得到结果 
//正确的话将输出：{6.000，24.000，60.000，...，0.000，0.000，0.000}


	cout << "结果是：" << endl;
	print_vector(result,3,3);
	return 0;
}

function flattenWithDepth (array, result, depth) {      
	for (var i = 0; i < array.length; i++) {        
		var value = array[i]        
        // 判断是否到了指定的深度 或者 当前数组是否已经全部展开
        if (depth > 0 && Array.isArray(value)) {
          flattenWithDepth(value, result, depth - 1)
        } else {
          result.push(value)
        }
      }    
      return result
    }    
    // 全部展开
    function flattenForever (array, result) {      
		for (var i = 0; i < array.length; i++) {        
			var value = array[i]    
        if (Array.isArray(value)) {
          flattenForever(value, result)
        } else {
          result.push(value)
        }
      }    
      return result
    }    
    function arrayFlatten (array, depth) {      
		if (depth == null) {        
			return flattenForever(array, [])
      }    
      return flattenWithDepth(array, [], depth)
    }

	function replicate (Yi[n],h1,gap) {      
		for (var i = 0; i < h1; i++) {        
			var value = array[i]    
        if (Array.isArray(value)) {
          Xi[n].copy
		  Xi[n].next = gap
        } else {
          result.push(value)
        }
		case (Array.isArray(value)) {
          Xi[n].copy
		  Xi[n].next = gap
        }
		case(){
          result.push(value)
        }
      }    
      return result
    }


	function replicate (Xi[n],h1,gap) {      
		for (var i = 0; i < h1; i++) {        
			var value = array[i]    
        if (Array.isArray(value)) {
          Xi[n].copy
		  Xi[n].next = gap
        } else {
          result.push(value)
        }
      }    
      return result
    }

	function alternatingPacking(Xi,yi,d,int[] hArray,l,P[] pi){

		for(itn i = 1;i<N;i++){

			pi.gap = Math.max(h1 - d,0);

			for(int n = 1;n < Math.abs(X[i]);n++){

				// 调用replicate函数

				Xi[n] = replicate(Xi[n],h1,gap);

				Xi[n] = Encode(Xi[n]);
			}

			// 奇数层与偶数层不同

			if(l % 2 != 0){

				// 初始化gap

				gap = Math.abs(hl);

				// 调用flattern函数

				yi = flattenWithDepth(array, result, depth);

				// 调用flatten函数2

				yi = flattenForever (array, result);

			}

			// 如果是p1 则进行对p1的单独初始化

			if(i == 1){

				// 调用initialize函数

				Initialize(W[]);

				// 遍历每一层神经网络
				// 修改为 j
				for(int j = 1;i<l;i++){

					// 如果是偶数层则进行如下操作

					if(j%2 == 0){
						if(h[j - 2] > h[j]){
							gap = Math.abs(h[j - 2] - h[j]);
						}

						// 调用flattern函数

						W[j,0] = flattenWithDepth(array, result, depth);

						// 调用flatten函数2

						W[j,0] = flattenForever (array, result);

						// 调用加密

						W[j,0] = Encryptor.encrypt(pk,W[j,0]);

					}else{

						// 否则进入的是h[j - 2] < h[j]的情况

						if(h[j + 1] > h[j - 1]){

						// 初始化gap

							gap = Math.abs(h[j+1] - h[j-1]);
						}else{
							// 否则进入h[j + 1] < h[j - 1]的情况
							
							// 调用flattern函数

							W[j,0] = flattenWithDepth(array, result, depth);

							// 调用flatten函数2

							W[j,0] = flattenForever (array, result);

							// 调用加密

							W[j,0] = Encryptor.encrypt(pk,W[j,0]);
						}
					}
				}
			}
		}
	}